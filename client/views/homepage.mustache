<html>
<head> 
    <title>
        Sole-city
    </title>
    <link rel="stylesheet" href="/index.css">
    <link rel="stylesheet" href="/post.css">
    <link rel="stylesheet" href="/header.css">
    <link rel="stylesheet" href="/chatRoomWidget.css">
    <link rel="stylesheet" href="/chatWindow.css">
    <script src="https://unpkg.com/htmx.org@1.9.12/dist/htmx.js" integrity="sha384-qbtR4rS9RrUMECUWDWM2+YGgN3U4V4ZncZ0BvUcg9FGct0jqXz3PUdVpU1p0yrXS" crossorigin="anonymous"></script>
    <script src="/socket.io/socket.io.js"></script>

    <script src='/showOnMap.js' defer></script>

    <script src='https://unpkg.com/maplibre-gl@latest/dist/maplibre-gl.js'></script>
    <link href='https://unpkg.com/maplibre-gl@latest/dist/maplibre-gl.css' rel='stylesheet' />
    
    <script>

    //initialising socket
      window.socket = io();

      socket.on('connect', () => {
        console.log('Connected with id:', socket.id);
      });
        
    //handling status codes
      document.addEventListener("DOMContentLoaded", (event) => {
        document.body.addEventListener('htmx:beforeSwap', function(evt) {
          if (evt.detail.xhr.status === 422) {
            evt.detail.shouldSwap = true;
            evt.detail.isError = false;
          }
          if (evt.detail.xhr.status === 404) {
            evt.detail.shouldSwap = true;
            evt.detail.isError = false;
          }
        });
      });
   
   //joining chatChannel and chatFunctionality
      document.addEventListener("DOMContentLoaded", (event) => {
        document.body.addEventListener('htmx:afterSwap', function(evt) {
//            console.log('logging afterswap event element :',evt.detail.elt.firstChild.classList);

            const element = evt.detail.elt;
//            console.log('LOGGING element: ',element);
            if(!element || !element.firstChild||!element.firstChild.classList){
                //console.log('no element or firstChild found');
                return;
                }
            const elementClassList = element.firstChild.classList;
 //           console.log('LOGGING element classlist: ',elementClassList);
            if(evt.detail.target.classList.contains('chat-section') && elementClassList.contains('chat-window')){
                const chatRoomID = document.querySelector('.chat-window').dataset.chatroomid;
                console.log('joined chatRoom : ',chatRoomID);
                socket.emit('joinRoom',chatRoomID)

                const chatInputForm = document.getElementById('chatForm');
                const messageInput = document.getElementById('messageText');
                const senderID = document.querySelector('.chat-window').dataset.senderid;
                console.log(senderID);

                function displayMessage(obj){
                        const displaySection = document.getElementById('chat-messages-display-section');
                        const div = document.createElement('div');
                        div.textContent= obj.chat_message;

                        if(obj.senderID == senderID){
                            div.classList.add('sent');
                        }
                        else{ div.classList.add('received');}
                        displaySection.append(div);

                    };

                chatInputForm.addEventListener('submit',(event) => { 
                        event.preventDefault();
                        const message = messageInput.value;
                        if(message === '') return;
                        displayMessage({chat_room_id:chatRoomID,chat_message:message,senderID:senderID});
                        socket.emit('sendMessage',{chat_room_id:chatRoomID,chat_message:message,senderID:senderID});
                        messageInput.value="";
                    })
                socket.off('receiveMessage');
                socket.on('receiveMessage',(obj)=>{
                        displayMessage(obj);
                    })

                }
        });
      });

//leave chat room on back Click 
function leaveChatRoom(chat_room_id){
    console.log('LOGGING chat_room_id in leaveChatRoom: ',chat_room_id);
    socket.emit('leaveRoom',chat_room_id);
    }

// handling the reapplication of handleFormSubmit script after swaps
    document.addEventListener('DOMContentLoaded',(event)=>{
        document.body.addEventListener('htmx:afterSwap', function(evt) {
          // Check if the swapped area contains your form
          const chatInputForm = document.getElementById('chatForm');
    const messageInput = document.getElementById('messageText');

          if (chatInputForm) {
            chatInputForm.addEventListener('submit', function(event) {
                event.preventDefault();
                const message = messageInput.value;
                if(message === '') return;
                displayMessage({chat_room_id:chatRoomID,chat_message:message,senderID:senderID});
                socket.emit('sendMessage',{chat_room_id:chatRoomID,chat_message:message,senderID:senderID});
                messageInput.value="";

            });
          }
        });
    });
    </script> 

</head>


<body>
{{> header }}
<div class="page">
    <div class="map-container ">
        <div class="map hidden">
        <div id='map'></div>
        <script>       
        let map;

        async function getUserLocation(){
            try{
                const response =  await fetch('http://ip-api.com/json/?fields=61439');
                if(!response.ok){
                    throw new Error(`ERROR fetching userLocation status: ${response.status}`)
                    }
                const data = await response.json();
                console.log('User Location: ',data);
                return data;
            }catch(error){console.log('Fetch error : ',error.message);}
        };

        getUserLocation().then((res)=>{

              map = new maplibregl.Map({
              container: 'map',
              style: 'https://api.maptiler.com/maps/streets-v2/style.json?key=I6spCmeih56SEqbVqt8w', // stylesheet location
              center: [res.lon, res.lat], // starting position [lng, lat]
              zoom: 10 // starting zoom
                });  
                let marker = new maplibregl.Marker()
                  .setLngLat([72.89, 19.03])
                  .addTo(map);
            });

//        fetch('http://ip-api.com/json/?fields=61439')
//            .then((res)=> res.json())
//            .then((res)=>{console.log(res.lat);userlocation = res;});
//         console.log('LOGGING userLocation: ',userlocation); 

          map = new maplibregl.Map({
          container: 'map',
          style: 'https://api.maptiler.com/maps/streets-v2/style.json?key=I6spCmeih56SEqbVqt8w', // stylesheet location
          center: [72.89, 19.03], // starting position [lng, lat]
          zoom: 10 // starting zoom
            });  
            let marker = new maplibregl.Marker()
              .setLngLat([72.89, 19.03])
              .addTo(map);

        </script> 
        </div>
        <button class="draw-map"> > </button>
    </div>
    <div class ="left-sidebar"> 
        <div class="chat-section"
            hx-get="/chat"
            hx-swap="innerHTML"
            hx-trigger="load">
            <div class="chatRooms"> 
            </div>
        </div>
    </div>
    <div class="trailwall" 
        hx-get="/trailwall"
        hx-trigger="load"
        hx-swap="innerHTML">
    </div>
    <div class= "right-sidebar">
        <div class="cities">
            Joined Cities:
            <div class="selectCity"
                 hx-get="/joinedCities"
                 hx-trigger="load"
                 hx-swap="innerHTML"
                 hx-target=".selectCity">
                 
             </div>
        </div>
        <div class="alerts-section"
            hx-get="/alerts"
            hx-trigger="load"
            hx-swap="innerHTML">
        </div>
        <div class="resources-section">
            <div>Resources
            </div>
        </div>
    </div>
</div>
</body>
<script>
function onClickMapDrawer(showingPost){ 
    let button = document.getElementsByClassName("draw-map")[0];
    let mapContainer = document.getElementsByClassName("map")[0];

    if(mapContainer.classList.contains('hidden')){
        mapContainer.style.display = 'block';
        mapContainer.classList.remove('hidden');
        button.innerHTML = '<';
    } else {
        mapContainer.style.display = 'none';
        mapContainer.classList.add('hidden');
        button.innerHTML = '>';
        if(!showingPost){
                map.removeLayer('post-source-layer');map.removeSource('post-source');
                getUserLocation().then((res)=>{
                    map.setCenter([res.lon,res.lat]);
                    map.zoomTo(10);
                    });
            }
    }
}

document.getElementsByClassName('draw-map')[0].addEventListener("click", function(){onClickMapDrawer(false)});
</script>

</html>
